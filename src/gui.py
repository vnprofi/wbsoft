from PyQt6.QtWidgets import (
    QApplication,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QPushButton,
    QFileDialog,
    QComboBox,
    QProgressBar,
    QMessageBox,
)
from PyQt6.QtCore import Qt, QUrl
from PyQt6.QtGui import QDesktopServices
import sys
import re
import pathlib
from typing import List, Dict

from qasync import QEventLoop, asyncSlot
import asyncio

try:
    # when packaged as a standalone executable core will be importable as top-level module
    from core import export_data, get_sellers_data_sync
    from html_report import SimpleHTMLReportGenerator
except ImportError:
    # fallback to relative import when running from source tree
    from .core import export_data, get_sellers_data_sync
    from .html_report import SimpleHTMLReportGenerator


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("WB Seller Parser")
        self.resize(540, 280)
        self._build_ui()

        self.total_ids = 0
        self.last_data = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTML –æ—Ç—á—ë—Ç–∞

    def _build_ui(self):
        layout = QVBoxLayout(self)

        # INPUT
        in_row = QHBoxLayout()
        self.input_edit = QLineEdit()
        self.input_edit.setReadOnly(True)
        btn_in = QPushButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å ID‚Ä¶")
        btn_in.clicked.connect(self.choose_input)
        in_row.addWidget(QLabel("–§–∞–π–ª ID:"))
        in_row.addWidget(self.input_edit, 1)
        in_row.addWidget(btn_in)
        layout.addLayout(in_row)

        # OUTPUT
        out_row = QHBoxLayout()
        self.output_edit = QLineEdit()
        self.output_edit.setReadOnly(True)
        btn_out = QPushButton("–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å‚Ä¶")
        btn_out.clicked.connect(self.choose_output)
        self.format_combo = QComboBox()
        self.format_combo.addItems(["CSV", "Excel (XLSX)"])
        out_row.addWidget(QLabel("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:"))
        out_row.addWidget(self.output_edit, 1)
        out_row.addWidget(btn_out)
        out_row.addWidget(self.format_combo)
        layout.addLayout(out_row)

        # Progress
        self.progress = QProgressBar()
        self.progress.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.progress)

        # Buttons row
        btn_row = QHBoxLayout()
        self.start_btn = QPushButton("–°—Ç–∞—Ä—Ç")
        self.start_btn.clicked.connect(self.on_start)
        self.html_report_btn = QPushButton("üìäHTML –û—Ç—á—ë—Ç")
        self.html_report_btn.clicked.connect(self.on_html_report)
        self.html_report_btn.setEnabled(False)  # –ù–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        suggest_btn = QPushButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ")
        suggest_btn.clicked.connect(lambda: QDesktopServices.openUrl(QUrl("https://t.me/Userspoi")))
        btn_row.addStretch(1)
        btn_row.addWidget(self.start_btn)
        btn_row.addWidget(self.html_report_btn)
        btn_row.addWidget(suggest_btn)
        layout.addLayout(btn_row)

    # ----------------------- UI helpers ------------------------
    def choose_input(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å ID", "", "Text files (*.txt);;CSV (*.csv);;All files (*)")
        if path:
            self.input_edit.setText(path)

    def choose_output(self):
        default_ext = "csv" if self.format_combo.currentIndex() == 0 else "xlsx"
        path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª", f"result.{default_ext}", "CSV (*.csv);;Excel (*.xlsx)")
        if path:
            self.output_edit.setText(path)

    def parse_ids(self, file_path: str) -> List[int]:
        ids: List[int] = []
        try:
            with open(file_path, encoding="utf-8-sig") as f:
                for line in f:
                    m = re.search(r"\d{3,}", line)
                    if m:
                        ids.append(int(m.group()))
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ID:\n{e}")
        return ids

    # ----------------------- Actions ---------------------------
    @asyncSlot()
    async def on_start(self):
        input_path = self.input_edit.text().strip()
        output_path = self.output_edit.text().strip()
        if not input_path or not pathlib.Path(input_path).exists():
            QMessageBox.warning(self, "–ù–µ –≤—ã–±—Ä–∞–Ω –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª —Å ID.")
            return
        if not output_path:
            QMessageBox.warning(self, "–ù–µ –≤—ã–±—Ä–∞–Ω –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
            return
        # Ensure extension matches format selection
        fmt_idx = self.format_combo.currentIndex()
        if fmt_idx == 0 and not output_path.lower().endswith(".csv"):
            output_path += ".csv"
        if fmt_idx == 1 and not output_path.lower().endswith(".xlsx"):
            output_path += ".xlsx"
        seller_ids = self.parse_ids(input_path)
        if not seller_ids:
            QMessageBox.information(self, "–ù–µ—Ç ID", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ ID –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.")
            return

        self.total_ids = len(seller_ids)
        self.progress.setValue(0)
        self.start_btn.setEnabled(False)

        def progress_cb(done: int, total: int):
            percent = int(done / total * 100)
            self.progress.setValue(percent)

        try:
            await export_data(seller_ids, output_path, progress_cb)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTML –æ—Ç—á—ë—Ç–∞
            self.last_data = await self._get_data_for_html(seller_ids)
            
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{output_path}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å HTML –æ—Ç—á—ë—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö!")
            
            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É HTML –æ—Ç—á—ë—Ç–∞
            self.html_report_btn.setEnabled(True)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–í–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}")
        finally:
            self.start_btn.setEnabled(True)
            self.progress.setValue(0)
    
    async def _get_data_for_html(self, seller_ids: List[int]) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTML –æ—Ç—á—ë—Ç–∞."""
        def progress_cb(done: int, total: int):
            percent = int(done / total * 100)
            self.progress.setValue(percent)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
            from core import get_sellers_data
            return await get_sellers_data(seller_ids, progress_cb)
        except Exception as e:
            print(f"Error getting data for HTML: {e}")
            return []
    
    def on_html_report(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ HTML –æ—Ç—á—ë—Ç–∞."""
        if not self.last_data:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        try:
            # –°–æ–∑–¥–∞—ë–º HTML –æ—Ç—á—ë—Ç
            report_generator = SimpleHTMLReportGenerator()
            report_generator.set_data(self.last_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report_path = report_generator.generate_report()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            report_generator.open_report_in_browser(report_path)
            
            QMessageBox.information(
                self, 
                "–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω", 
                f"HTML –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ!\n\n–ü—É—Ç—å: {report_path}\n\n–í –æ—Ç—á—ë—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV/Excel/PDF"
            )
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML –æ—Ç—á—ë—Ç–∞:\n{e}")


# ----------------------- Entry point -------------------------

def main():
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)
    window = MainWindow()
    window.show()
    with loop:
        loop.run_forever()


if __name__ == "__main__":
    main()